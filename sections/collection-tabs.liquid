{% comment %}
  Collection Tabs Section
  Displays multiple collections in tabbed interface with carousel functionality
  Features:
  - Ajax-powered tab switching
  - Product carousel with Swiper.js
  - Responsive design using Tailwind CSS
  - Customizable products per row
  - Hover effects and animations
{% endcomment %}

{% if section.settings.show_section %}
  <section class="collection-tabs relative py-12 md:py-16" data-section-id="{{ section.id }}">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      {% if section.settings.title != blank %}
        <h2 class="text-2xl md:text-3xl font-bold text-center mb-8 text-gray-900">
          {{ section.settings.title }}
        </h2>
      {% endif %}

      <!-- Tab Navigation -->
      <div class="flex justify-center mb-8">
        <div class="inline-flex flex-wrap justify-center gap-2 p-1 bg-gray-100 rounded-lg">
          {% for block in section.blocks %}
            {% if block.settings.collection != blank %}
              <button
                class="tab-button px-4 py-2 rounded-md text-sm font-medium transition-all duration-200
                       {% if forloop.first %}bg-white text-gray-900 shadow-sm{% else %}text-gray-600 hover:text-gray-900{% endif %}"
                data-tab="{{ block.id }}"
                data-collection="{{ block.settings.collection.id }}"
                {{ block.shopify_attributes }}
              >
                {{ block.settings.tab_title | default: block.settings.collection.title }}
              </button>
            {% endif %}
          {% endfor %}
        </div>
      </div>

      <!-- Tab Content -->
      <div class="tab-content relative">
        {% for block in section.blocks %}
          {% if block.settings.collection != blank %}
            <div 
              class="tab-pane {% unless forloop.first %}hidden{% endunless %}"
              data-tab-content="{{ block.id }}"
              data-collection-id="{{ block.settings.collection.id }}"
            >
              <!-- Loading State -->
              <div class="loading-state hidden">
                <div class="flex justify-center items-center h-64">
                  <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
                </div>
              </div>

              <!-- Products Carousel -->
              <div class="products-carousel swiper">
                <div class="swiper-wrapper">
                  {% assign collection = block.settings.collection %}
                  {% assign products_limit = section.settings.products_limit | default: 12 %}
                  
                  {% for product in collection.products limit: products_limit %}
                    <div class="swiper-slide">
                      <div class="product-card group relative bg-white rounded-lg overflow-hidden shadow-sm hover:shadow-lg transition-shadow duration-300">
                        <!-- Product Image -->
                        <a href="{{ product.url }}" class="block aspect-square overflow-hidden">
                          {% if product.featured_image %}
                            <img 
                              src="{{ product.featured_image | image_url: width: 400 }}"
                              alt="{{ product.featured_image.alt | default: product.title }}"
                              class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                              loading="lazy"
                              width="400"
                              height="400"
                            >
                          {% else %}
                            <div class="w-full h-full bg-gray-200 flex items-center justify-center">
                              <span class="text-gray-400">No image</span>
                            </div>
                          {% endif %}
                          
                          <!-- Quick View Badge -->
                          {% if section.settings.show_badges and product.available == false %}
                            <span class="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 text-xs rounded">
                              Sold Out
                            </span>
                          {% endif %}
                        </a>

                        <!-- Product Info -->
                        <div class="p-4">
                          <h3 class="font-medium text-gray-900 mb-1 line-clamp-2">
                            <a href="{{ product.url }}" class="hover:text-gray-700">
                              {{ product.title }}
                            </a>
                          </h3>
                          
                          <div class="flex items-center justify-between">
                            <div class="price">
                              {% if product.compare_at_price > product.price %}
                                <span class="text-sm text-gray-500 line-through">{{ product.compare_at_price | money }}</span>
                                <span class="text-lg font-semibold text-red-600">{{ product.price | money }}</span>
                              {% else %}
                                <span class="text-lg font-semibold text-gray-900">{{ product.price | money }}</span>
                              {% endif %}
                            </div>
                            
                            {% if section.settings.show_quick_add %}
                              <button 
                                class="quick-add-btn opacity-0 group-hover:opacity-100 transition-opacity duration-200
                                       bg-gray-900 text-white p-2 rounded-full hover:bg-gray-700"
                                data-product-id="{{ product.id }}"
                                data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                                aria-label="Quick add to cart"
                              >
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                </svg>
                              </button>
                            {% endif %}
                          </div>
                        </div>
                      </div>
                    </div>
                  {% endfor %}
                </div>

                <!-- Navigation buttons -->
                <button class="swiper-button-prev !w-10 !h-10 !bg-white !rounded-full !shadow-lg after:!text-sm after:!text-gray-900"></button>
                <button class="swiper-button-next !w-10 !h-10 !bg-white !rounded-full !shadow-lg after:!text-sm after:!text-gray-900"></button>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      </div>
    </div>
  </section>
{% endif %}

{% stylesheet %}
  .collection-tabs {
    --swiper-navigation-size: 20px;
  }

  .tab-button {
    @apply cursor-pointer select-none;
  }

  .tab-button.active {
    @apply bg-white text-gray-900 shadow-sm;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .swiper-button-prev,
  .swiper-button-next {
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .collection-tabs:hover .swiper-button-prev,
  .collection-tabs:hover .swiper-button-next {
    opacity: 1;
  }

  .swiper-button-prev:after,
  .swiper-button-next:after {
    font-weight: bold;
  }

  @media (max-width: 768px) {
    .swiper-button-prev,
    .swiper-button-next {
      display: none;
    }
  }
{% endstylesheet %}

{% javascript %}
  class CollectionTabs {
    constructor(section) {
      this.section = section;
      this.tabButtons = section.querySelectorAll('.tab-button');
      this.tabPanes = section.querySelectorAll('.tab-pane');
      this.swipers = {};
      this.loadedTabs = new Set();
      
      this.init();
    }

    init() {
      // Initialize first tab's swiper
      this.initSwiper(this.tabPanes[0]);
      this.loadedTabs.add(this.tabPanes[0].dataset.tabContent);

      // Add click handlers to tab buttons
      this.tabButtons.forEach(button => {
        button.addEventListener('click', (e) => this.switchTab(e));
      });

      // Handle quick add buttons
      if ({{ section.settings.show_quick_add | json }}) {
        this.section.addEventListener('click', (e) => {
          if (e.target.closest('.quick-add-btn')) {
            this.handleQuickAdd(e.target.closest('.quick-add-btn'));
          }
        });
      }
    }

    switchTab(e) {
      const button = e.currentTarget;
      const tabId = button.dataset.tab;
      
      // Update active states
      this.tabButtons.forEach(btn => {
        btn.classList.remove('active', 'bg-white', 'text-gray-900', 'shadow-sm');
        btn.classList.add('text-gray-600', 'hover:text-gray-900');
      });
      
      button.classList.add('active', 'bg-white', 'text-gray-900', 'shadow-sm');
      button.classList.remove('text-gray-600', 'hover:text-gray-900');

      // Show/hide tab panes
      this.tabPanes.forEach(pane => {
        if (pane.dataset.tabContent === tabId) {
          pane.classList.remove('hidden');
          
          // Load products via Ajax if not already loaded
          if (!this.loadedTabs.has(tabId)) {
            this.loadTabProducts(pane, button.dataset.collection);
          } else if (!this.swipers[tabId]) {
            // Initialize swiper if not already done
            this.initSwiper(pane);
          }
        } else {
          pane.classList.add('hidden');
        }
      });
    }

    async loadTabProducts(pane, collectionId) {
      const loadingState = pane.querySelector('.loading-state');
      const carousel = pane.querySelector('.products-carousel');
      
      // Show loading state
      loadingState.classList.remove('hidden');
      carousel.style.display = 'none';

      try {
        const response = await fetch(`/collections/${collectionId}/products.json?limit={{ section.settings.products_limit | default: 12 }}`);
        const data = await response.json();
        
        // Render products
        const productsHtml = data.products.map(product => this.renderProduct(product)).join('');
        carousel.querySelector('.swiper-wrapper').innerHTML = productsHtml;
        
        // Hide loading state and show carousel
        loadingState.classList.add('hidden');
        carousel.style.display = 'block';
        
        // Initialize swiper
        this.initSwiper(pane);
        this.loadedTabs.add(pane.dataset.tabContent);
        
      } catch (error) {
        console.error('Failed to load products:', error);
        loadingState.innerHTML = '<p class="text-center text-red-600">Failed to load products</p>';
      }
    }

    renderProduct(product) {
      const imageUrl = product.images[0] ? product.images[0].src.replace('.jpg', '_400x400.jpg') : '';
      const price = (product.price / 100).toFixed(2);
      const comparePrice = product.compare_at_price ? (product.compare_at_price / 100).toFixed(2) : null;
      
      return `
        <div class="swiper-slide">
          <div class="product-card group relative bg-white rounded-lg overflow-hidden shadow-sm hover:shadow-lg transition-shadow duration-300">
            <a href="/products/${product.handle}" class="block aspect-square overflow-hidden">
              ${imageUrl ? `
                <img 
                  src="${imageUrl}"
                  alt="${product.title}"
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                  loading="lazy"
                  width="400"
                  height="400"
                >
              ` : `
                <div class="w-full h-full bg-gray-200 flex items-center justify-center">
                  <span class="text-gray-400">No image</span>
                </div>
              `}
              ${!product.available && {{ section.settings.show_badges | json }} ? `
                <span class="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 text-xs rounded">
                  Sold Out
                </span>
              ` : ''}
            </a>
            <div class="p-4">
              <h3 class="font-medium text-gray-900 mb-1 line-clamp-2">
                <a href="/products/${product.handle}" class="hover:text-gray-700">
                  ${product.title}
                </a>
              </h3>
              <div class="flex items-center justify-between">
                <div class="price">
                  ${comparePrice ? `
                    <span class="text-sm text-gray-500 line-through">${window.Shopify.currency.active} ${comparePrice}</span>
                    <span class="text-lg font-semibold text-red-600">${window.Shopify.currency.active} ${price}</span>
                  ` : `
                    <span class="text-lg font-semibold text-gray-900">${window.Shopify.currency.active} ${price}</span>
                  `}
                </div>
                ${{{ section.settings.show_quick_add | json }} && product.available ? `
                  <button 
                    class="quick-add-btn opacity-0 group-hover:opacity-100 transition-opacity duration-200
                           bg-gray-900 text-white p-2 rounded-full hover:bg-gray-700"
                    data-product-id="${product.id}"
                    data-variant-id="${product.variants[0].id}"
                    aria-label="Quick add to cart"
                  >
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                  </button>
                ` : ''}
              </div>
            </div>
          </div>
        </div>
      `;
    }

    initSwiper(pane) {
      const tabId = pane.dataset.tabContent;
      const swiperEl = pane.querySelector('.swiper');
      
      if (!swiperEl || this.swipers[tabId]) return;

      this.swipers[tabId] = new Swiper(swiperEl, {
        slidesPerView: {{ section.settings.products_per_row_mobile | default: 1 }},
        spaceBetween: 16,
        navigation: {
          nextEl: swiperEl.querySelector('.swiper-button-next'),
          prevEl: swiperEl.querySelector('.swiper-button-prev'),
        },
        breakpoints: {
          640: {
            slidesPerView: {{ section.settings.products_per_row_tablet | default: 3 }},
            spaceBetween: 20,
          },
          1024: {
            slidesPerView: {{ section.settings.products_per_row_desktop | default: 4 }},
            spaceBetween: 24,
          },
        },
      });
    }

    async handleQuickAdd(button) {
      const variantId = button.dataset.variantId;
      button.disabled = true;
      button.innerHTML = '<div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>';

      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: variantId,
            quantity: 1,
          }),
        });

        if (response.ok) {
          // Update cart UI
          const cart = await response.json();
          this.updateCartCount();
          
          // Show success state
          button.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>';
          
          setTimeout(() => {
            button.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>';
            button.disabled = false;
          }, 2000);
        }
      } catch (error) {
        console.error('Failed to add to cart:', error);
        button.innerHTML = '<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path></svg>';
        button.disabled = false;
      }
    }

    async updateCartCount() {
      try {
        const response = await fetch('/cart.js');
        const cart = await response.json();
        
        // Update cart count in header if element exists
        const cartCount = document.querySelector('.cart-count');
        if (cartCount) {
          cartCount.textContent = cart.item_count;
        }
      } catch (error) {
        console.error('Failed to update cart count:', error);
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    // Wait for Swiper to be loaded
    if (typeof Swiper === 'undefined') {
      // Load Swiper if not already loaded
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js';
      script.onload = () => {
        initializeSections();
      };
      document.head.appendChild(script);

      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = 'https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css';
      document.head.appendChild(link);
    } else {
      initializeSections();
    }
  });

  function initializeSections() {
    document.querySelectorAll('.collection-tabs').forEach(section => {
      new CollectionTabs(section);
    });
  }
{% endjavascript %}

{% schema %}
{
  "name": "Collection Tabs",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_section",
      "label": "Show section",
      "default": true
    },
    {
      "type": "text",
      "id": "title",
      "label": "Section title",
      "default": "Shop by Category"
    },
    {
      "type": "range",
      "id": "products_limit",
      "label": "Products per collection",
      "min": 4,
      "max": 24,
      "step": 1,
      "default": 12
    },
    {
      "type": "range",
      "id": "products_per_row_desktop",
      "label": "Products per row (Desktop)",
      "min": 3,
      "max": 6,
      "step": 1,
      "default": 4
    },
    {
      "type": "range",
      "id": "products_per_row_tablet",
      "label": "Products per row (Tablet)",
      "min": 2,
      "max": 4,
      "step": 1,
      "default": 3
    },
    {
      "type": "range",
      "id": "products_per_row_mobile",
      "label": "Products per row (Mobile)",
      "min": 1,
      "max": 3,
      "step": 1,
      "default": 1
    },
    {
      "type": "checkbox",
      "id": "show_badges",
      "label": "Show product badges",
      "default": true,
      "info": "Shows 'Sold Out' and sale badges"
    },
    {
      "type": "checkbox",
      "id": "show_quick_add",
      "label": "Show quick add button",
      "default": true,
      "info": "Allows customers to add products to cart without visiting product page"
    }
  ],
  "blocks": [
    {
      "type": "collection_tab",
      "name": "Collection Tab",
      "limit": 5,
      "settings": [
        {
          "type": "collection",
          "id": "collection",
          "label": "Collection"
        },
        {
          "type": "text",
          "id": "tab_title",
          "label": "Tab title",
          "info": "Leave blank to use collection title"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Collection Tabs",
      "blocks": [
        {
          "type": "collection_tab"
        },
        {
          "type": "collection_tab"
        },
        {
          "type": "collection_tab"
        }
      ]
    }
  ]
}
{% endschema %}